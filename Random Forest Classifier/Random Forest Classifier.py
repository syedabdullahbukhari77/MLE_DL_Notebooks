# -*- coding: utf-8 -*-
"""Predicting housing prices from a few feature- Minimize prediction error without overfitting the training data.( 2025 - 07 - 04 )ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cCkfMOenUT3jAdcHJ0eBI6-y0z8IlN3d
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import PowerTransformer
from sklearn.pipeline import Pipeline
from sklearn.datasets import make_regression

# Generate synthetic regression data (like house prices)
X, y = make_regression(n_samples=500, n_features=5, noise=20, random_state=42)

X_train , X_test , y_train , y_test = train_test_split(X , y , test_size=0.2 , random_state=42)

import math as m

def evaluate(model , name):
  model.fit(X_train , y_train)
  y_train_pred = model.predict(X_train)
  y_test_pred = model.predict(X_test)

  train_r2 = r2_score(y_train, y_train_pred)
  test_r2 = r2_score(y_test, y_test_pred)

  print(f"\nüîç {name} Model Evaluation:")
  print(f"Train R¬≤ Score: {train_r2:.3f}")
  print(f"Test R¬≤ Score : {test_r2:.3f}")
  print(f"Train RMSE    : {m.sqrt(mean_squared_error(y_train, y_train_pred))}")
  print(f"Test RMSE     : {m.sqrt(mean_squared_error(y_test, y_test_pred))}")
  return train_r2, test_r2

model_bias = Pipeline(steps=[
    ('Power Transformer' , PowerTransformer(method='yeo-johnson')),
    ('lr' , LinearRegression())

])

evaluate(model_bias , 'High bias (Linear Regression)')

model_varience = Pipeline(steps=[
    ('Power Transformer' , PowerTransformer(method='yeo-johnson') ),
    ('lr' , LinearRegression())
])

evaluate(model_varience,'High varience (Linear Regression)')

model_balanced = Pipeline([
    ('power', PowerTransformer()),
    ('rf', RandomForestRegressor(n_estimators=100, max_depth=5, random_state=42))
])
evaluate(model_balanced, "Balanced (Random Forest, max_depth=5)")

