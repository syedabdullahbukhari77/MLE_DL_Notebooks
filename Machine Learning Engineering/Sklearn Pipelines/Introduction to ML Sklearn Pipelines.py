# -*- coding: utf-8 -*-
"""Identify Pipeline Parts in ML ( 2025 - 06 -12 ).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lVVE3bF9YQM6M2sHoBpye3ahmdspzrKK

##Basics Test — Identify Pipeline Parts

>Question 1:
Given the pipeline below, which step applies transformations to specific columns?
"""

Pipeline([
    ('imputer', SimpleImputer(strategy='median')),
    ('column_ops', ColumnTransformer([
        ('log_area', FunctionTransformer(np.log1p), ['LotArea']),
        ('leave_year', 'passthrough', ['YearBuilt'])
    ], remainder='drop')),
    ('scaler', StandardScaler())
])

""">What is the name of the step that applies per-column transformations?

* A. 'imputer'

* B. 'column_ops'

* C. 'scaler'

>Question 2:
What does remainder='drop' mean in a ColumnTransformer?

* Only the columns explicitly listed in the transformer will be kept.
* All other columns (not mentioned in the list) will be dropped.

>Question 3 (Code Conceptualization):
Why might you apply a log transformation to 'LotArea', but not to 'YearBuilt'?

* LotArea (square footage of land) can vary a lot. Some houses may have a 5,000 sqft lot, others 50,000+

* YearBuilt is more like:

 -- A date or ordinal feature.

  -- Taking the log of a year like 2003 doesn't help — it just distorts the meaning.

>Once you finish these, I’ll review your answers and move you to Stage 2: Code Reconstruction, where you'll build your own pipeline from scratch with guidance.

## Pipeline Build Challenge (from Description)

>Your task:
"""

import pandas as pd
import numpy as np

from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import FunctionTransformer , StandardScaler
from sklearn.pipeline import Pipeline

df = pd.DataFrame({
    'LotArea': [8450, 9600, 11250, 9550, np.nan],
    'YearBuilt': [2003, 1976, 2001, 1915, 2000],
    'GarageArea': [548, 460, np.nan, 468, 730],
    'SalePrice': [208500, 181500, 223500, 140000, 250000]  # not included in pipeline
})

df

df.isnull().sum()

log_transformer = FunctionTransformer(np.log1p , validate=True)

columns_transfomer = ColumnTransformer([
    ('log_lotArea' , log_transformer , ['LotArea']),
    ('log_garage' , log_transformer , ['GarageArea']),
    ('passthrough' , 'passthrough' , ['YearBuilt'])
] , remainder = 'drop')



numeric_pipeline = Pipeline([
    ('imputer' , SimpleImputer(strategy='mean', keep_empty_features=True).set_output(transform='pandas')),
    ('transform_cols' , columns_transfomer),
    ('scaler' , StandardScaler())
])

numeric_pipeline.fit_transform(df)
data = numeric_pipeline

print(data)

