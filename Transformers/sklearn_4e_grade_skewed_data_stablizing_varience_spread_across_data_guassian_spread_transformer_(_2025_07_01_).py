# -*- coding: utf-8 -*-
"""Sklearn 4E grade - Skewed data - stablizing varience spread across data - Guassian Spread - Transformer ( 2025 - 07 - 01 ).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YBD0D1xi46Ti2cLQa3kx7vxbRHlmf6eM
"""

import pandas as pd , numpy as np , matplotlib.pyplot as plt , seaborn as sns

df = pd.read_csv('/content/Business-simulated-data-trf-transformer')
df

df.info()

X = df.drop(columns='y')
y = df['y']

cat_col = [y for y in X.select_dtypes(include=['object']).columns]

num_col = [y for y in X.select_dtypes(include=[np.number]).columns]

num_col.pop(0)

num_col

import matplotlib.pyplot as plt
import numpy as np

df = np.random.exponential(scale=2, size=1000)  # Skewed data
plt.subplot(121)
plt.hist(df, bins=50)
plt.title("Original Skewed Data")

plt.subplot(122)
sns.histplot(df, bins=50)
plt.title('Graph plot')
plt.show()

corr_matrix = df[num_col].corr()
corr_matrix

sns.heatmap(corr_matrix, annot=True , cmap='viridis')









X_train , X_test , y_train , y_test = train_test_split(X , y , random_state=42)

sns.displot(X_test['age'] , color='purple' , label='Actual')
sns.kdeplot(X_test['age'] , color='yellow')
plt.show()

plt.scatter(X_test['age'] ,X_test['monthly_spend'], color='#4CAF50' , label='age')
plt.scatter(X_test['age'] ,X_test['monthly_spend'] , cmap='viridis' , label='Actual')
plt.show()



from sklearn.ensemble import IsolationForest
from sklearn.linear_model import LinearRegression
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import PowerTransformer , StandardScaler , OneHotEncoder
from sklearn.metrics import mean_squared_error , r2_score
from sklearn.model_selection import train_test_split

trf1 = ColumnTransformer(transformers=[
    ('onehotencoder' , OneHotEncoder(handle_unknown='ignore') , X.select_dtypes(include=['object']).columns)
])

trf2 = ColumnTransformer(transformers=[
    ('scaler' , StandardScaler() , X.select_dtypes(include=[np.number]).columns)
])

trf3 = PowerTransformer(method='yeo-johnson')

trf4 = LinearRegression()

pipeline = Pipeline(steps=[
    ('transformer 1' , trf1)
    ('transformer 2' , trf2)
    ('transformer 3' , trf3)
    ('transformer 4' , trf4)
] remainder=pa)